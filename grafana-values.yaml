admin:
  existingSecret: ""
  passwordKey: admin-password
  userKey: admin-user
adminUser: admin
affinity: {}
alerting: {}
assertNoLeakedSecrets: false
automountServiceAccountToken: true
autoscaling:
  behavior: {}
  enabled: false
  maxReplicas: 5
  minReplicas: 1
  targetCPU: "60"
  targetMemory: ""
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault
createConfigmap: true
dashboardProviders: {}
dashboards: {}
dashboardsConfigMaps: {}
datasources: {}
deploymentStrategy:
  type: RollingUpdate
dnsConfig: {}
dnsPolicy: null
downloadDashboards:
  env: {}
  envFromSecret: ""
  envValueFrom: {}
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
downloadDashboardsImage:
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: curlimages/curl
  sha: ""
  tag: 8.9.1
enableKubeBackwardCompatibility: false
enableServiceLinks: true
env: {}
envFromConfigMaps: []
envFromSecret: ""
envFromSecrets: []
envRenderSecret: {}
envValueFrom: {}
extraConfigmapMounts: []
extraContainerVolumes: []
extraContainers: ""
extraEmptyDirMounts: []
extraExposePorts: []
extraInitContainers: []
extraLabels: {}
extraObjects: []
extraSecretMounts: []
extraVolumeMounts: []
extraVolumes: []
global:
  imagePullSecrets: []
  imageRegistry: null
gossipPortName: gossip
grafana.ini:
  smtp:
    enabled: true
    host: smtp.mailersend.net:587
    user: MS_JWC6UA@test-vz9dlemrojp4kj50.mlsender.net
    password: mssp.t8pvG0g.7dnvo4drme3g5r86.XVvgrDu
    from_address: MS_JWC6UA@test-vz9dlemrojp4kj50.mlsender.net
    from_name: Grafana
    skip_verify: false
  analytics:
    check_for_updates: true
  grafana_net:
    url: https://grafana.net
  log:
    mode: console
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  server:
    domain:
      "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ tpl (.Values.ingress.hosts
      | first) . }}{{ else }}''{{ end }}"
headlessService: false
hostAliases: []
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: grafana/grafana
  sha: ""
  tag: ""
imageRenderer:
  affinity: {}
  automountServiceAccountToken: false
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    minReplicas: 1
    targetCPU: "60"
    targetMemory: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  deploymentStrategy: {}
  enabled: false
  env:
    HTTP_HOST: 0.0.0.0
    XDG_CACHE_HOME: /tmp/.chromium
    XDG_CONFIG_HOME: /tmp/.chromium
  envValueFrom: {}
  extraConfigmapMounts: []
  extraSecretMounts: []
  extraVolumeMounts: []
  extraVolumes: []
  grafanaProtocol: http
  grafanaSubPath: ""
  hostAliases: []
  image:
    pullPolicy: Always
    registry: docker.io
    repository: grafana/grafana-image-renderer
    sha: ""
    tag: latest
  networkPolicy:
    extraIngressSelectors: []
    limitEgress: false
    limitIngress: true
  nodeSelector: {}
  podAnnotations: {}
  podPortName: http
  priorityClassName: ""
  renderingCallbackURL: ""
  replicas: 1
  resources: {}
  revisionHistoryLimit: 10
  securityContext: {}
  serverURL: ""
  service:
    appProtocol: ""
    enabled: true
    port: 8081
    portName: http
    targetPort: 8081
  serviceAccountName: ""
  serviceMonitor:
    enabled: false
    interval: 1m
    labels: {}
    path: /metrics
    relabelings: []
    scheme: http
    scrapeTimeout: 30s
    targetLabels: []
    tlsConfig: {}
  tolerations: []
ingress:
  annotations: {}
  enabled: false
  extraPaths: []
  hosts:
    - chart-example.local
  labels: {}
  path: /
  pathType: Prefix
  tls: []
initChownData:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: library/busybox
    sha: ""
    tag: 1.31.1
  resources: {}
  securityContext:
    capabilities:
      add:
        - CHOWN
    runAsNonRoot: false
    runAsUser: 0
    seccompProfile:
      type: RuntimeDefault
ldap:
  config: ""
  enabled: false
  existingSecret: ""
lifecycleHooks: {}
livenessProbe:
  failureThreshold: 10
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
namespaceOverride: ""
networkPolicy:
  allowExternal: true
  egress:
    blockDNSResolution: false
    enabled: false
    ports: []
    to: []
  enabled: false
  explicitNamespacesSelector: {}
  ingress: true
nodeSelector: {}
notifiers: {}
persistence:
  accessModes:
    - ReadWriteOnce
  disableWarning: false
  enabled: false
  extraPvcLabels: {}
  finalizers:
    - kubernetes.io/pvc-protection
  inMemory:
    enabled: false
  lookupVolumeName: true
  size: 10Gi
  type: pvc
plugins: []
podDisruptionBudget: {}
podPortName: grafana
rbac:
  create: true
  extraClusterRoleRules: []
  extraRoleRules: []
  namespaced: false
  pspEnabled: false
  pspUseAppArmor: false
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
replicas: 1
resources: {}
revisionHistoryLimit: 10
route:
  main:
    additionalRules: []
    annotations: {}
    apiVersion: gateway.networking.k8s.io/v1
    enabled: false
    filters: []
    hostnames: []
    kind: HTTPRoute
    labels: {}
    matches:
      - path:
          type: PathPrefix
          value: /
    parentRefs: []
securityContext:
  fsGroup: 472
  runAsGroup: 472
  runAsNonRoot: true
  runAsUser: 472
service:
  annotations: {}
  appProtocol: ""
  enabled: true
  ipFamilies: []
  ipFamilyPolicy: ""
  labels: {}
  loadBalancerClass: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  port: 80
  portName: service
  sessionAffinity: ""
  targetPort: 3000
  type: ClusterIP
serviceAccount:
  automountServiceAccountToken: false
  create: true
  labels: {}
  name: null
  nameTest: null
serviceMonitor:
  basicAuth: {}
  enabled: false
  interval: 30s
  labels: {}
  metricRelabelings: []
  path: /metrics
  relabelings: []
  scheme: http
  scrapeTimeout: 30s
  targetLabels: []
  tlsConfig: {}
shareProcessNamespace: false
sidecar:
  alerts:
    enabled: false
    env: {}
    extraMounts: []
    initAlerts: false
    label: grafana_alert
    labelValue: ""
    reloadURL: http://localhost:3000/api/admin/provisioning/alerting/reload
    resource: both
    script: null
    searchNamespace: null
    sizeLimit: {}
    skipReload: false
    watchMethod: WATCH
  dashboards:
    SCProvider: true
    defaultFolderName: null
    enabled: false
    env: {}
    envValueFrom: {}
    extraMounts: []
    folder: /tmp/dashboards
    folderAnnotation: null
    label: grafana_dashboard
    labelValue: ""
    provider:
      allowUiUpdates: false
      disableDelete: false
      folder: ""
      folderUid: ""
      foldersFromFilesStructure: false
      name: sidecarProvider
      orgid: 1
      type: file
    reloadURL: http://localhost:3000/api/admin/provisioning/dashboards/reload
    resource: both
    script: null
    searchNamespace: null
    sizeLimit: {}
    skipReload: false
    watchMethod: WATCH
  datasources:
    enabled: false
    env: {}
    envValueFrom: {}
    extraMounts: []
    initDatasources: false
    label: grafana_datasource
    labelValue: ""
    reloadURL: http://localhost:3000/api/admin/provisioning/datasources/reload
    resource: both
    script: null
    searchNamespace: null
    sizeLimit: {}
    skipReload: false
    watchMethod: WATCH
  enableUniqueFilenames: false
  image:
    registry: quay.io
    repository: kiwigrid/k8s-sidecar
    sha: ""
    tag: 1.30.0
  imagePullPolicy: IfNotPresent
  livenessProbe: {}
  notifiers:
    enabled: false
    env: {}
    extraMounts: []
    initNotifiers: false
    label: grafana_notifier
    labelValue: ""
    reloadURL: http://localhost:3000/api/admin/provisioning/notifications/reload
    resource: both
    script: null
    searchNamespace: null
    sizeLimit: {}
    skipReload: false
    watchMethod: WATCH
  plugins:
    enabled: false
    env: {}
    extraMounts: []
    initPlugins: false
    label: grafana_plugin
    labelValue: ""
    reloadURL: http://localhost:3000/api/admin/provisioning/plugins/reload
    resource: both
    script: null
    searchNamespace: null
    sizeLimit: {}
    skipReload: false
    watchMethod: WATCH
  readinessProbe: {}
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
smtp:
  existingSecret: ""
  passwordKey: password
  userKey: user
testFramework:
  enabled: true
  image:
    registry: docker.io
    repository: bats/bats
    tag: v1.4.1
  imagePullPolicy: IfNotPresent
  resources: {}
  securityContext: {}
tolerations: []
topologySpreadConstraints: []
useStatefulSet: false
